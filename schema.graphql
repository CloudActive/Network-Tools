# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Query {
  randomNumber: RandomNumber
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  domains(
    where: DomainWhereInput! = {}
    orderBy: [DomainOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Domain!]
  domain(where: DomainWhereUniqueInput!): Domain
  domainsCount(where: DomainWhereInput! = {}): Int
  whoisServers(
    where: WhoisServerWhereInput! = {}
    orderBy: [WhoisServerOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [WhoisServer!]
  whoisServer(where: WhoisServerWhereUniqueInput!): WhoisServer
  whoisServersCount(where: WhoisServerWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

type RandomNumber {
  number: Int
  generatedAt: String
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  isAdmin: Boolean
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
  isAdmin: BooleanFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  isAdmin: Boolean
}

type Domain {
  id: ID!
  name: String
  registryCreationDate: DateTime
  registryExpiryDate: DateTime
  registryUpdatedDate: DateTime
  registryDomainId: String
  registrar: String
  registrarWhoisServer: String
  lastCheckedDate: DateTime
  lastCheckError: String
  checkPending: Boolean
  whoisData: String
  expiresIn: String
  age: String
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input DomainWhereUniqueInput {
  id: ID
}

input DomainWhereInput {
  AND: [DomainWhereInput!]
  OR: [DomainWhereInput!]
  NOT: [DomainWhereInput!]
  id: IDFilter
  name: StringFilter
  registryCreationDate: DateTimeNullableFilter
  registryExpiryDate: DateTimeNullableFilter
  registryUpdatedDate: DateTimeNullableFilter
  registryDomainId: StringFilter
  registrar: StringFilter
  registrarWhoisServer: StringFilter
  lastCheckedDate: DateTimeNullableFilter
  lastCheckError: StringFilter
  checkPending: BooleanFilter
  whoisData: StringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input DomainOrderByInput {
  id: OrderDirection
  name: OrderDirection
  registryCreationDate: OrderDirection
  registryExpiryDate: OrderDirection
  registryUpdatedDate: OrderDirection
  registryDomainId: OrderDirection
  registrar: OrderDirection
  registrarWhoisServer: OrderDirection
  lastCheckedDate: OrderDirection
  lastCheckError: OrderDirection
  checkPending: OrderDirection
  whoisData: OrderDirection
}

input DomainUpdateInput {
  name: String
  registryCreationDate: DateTime
  registryExpiryDate: DateTime
  registryUpdatedDate: DateTime
  registryDomainId: String
  registrar: String
  registrarWhoisServer: String
  lastCheckedDate: DateTime
  lastCheckError: String
  checkPending: Boolean
  whoisData: String
}

input DomainUpdateArgs {
  where: DomainWhereUniqueInput!
  data: DomainUpdateInput!
}

input DomainCreateInput {
  name: String
  registryCreationDate: DateTime
  registryExpiryDate: DateTime
  registryUpdatedDate: DateTime
  registryDomainId: String
  registrar: String
  registrarWhoisServer: String
  lastCheckedDate: DateTime
  lastCheckError: String
  checkPending: Boolean
  whoisData: String
}

type WhoisServer {
  id: ID!
  tld: String
  server: String
}

input WhoisServerWhereUniqueInput {
  id: ID
}

input WhoisServerWhereInput {
  AND: [WhoisServerWhereInput!]
  OR: [WhoisServerWhereInput!]
  NOT: [WhoisServerWhereInput!]
  id: IDFilter
  tld: StringFilter
  server: StringFilter
}

input WhoisServerOrderByInput {
  id: OrderDirection
  tld: OrderDirection
  server: OrderDirection
}

input WhoisServerUpdateInput {
  tld: String
  server: String
}

input WhoisServerUpdateArgs {
  where: WhoisServerWhereUniqueInput!
  data: WhoisServerUpdateInput!
}

input WhoisServerCreateInput {
  tld: String
  server: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createDomain(data: DomainCreateInput!): Domain
  createDomains(data: [DomainCreateInput!]!): [Domain]
  updateDomain(where: DomainWhereUniqueInput!, data: DomainUpdateInput!): Domain
  updateDomains(data: [DomainUpdateArgs!]!): [Domain]
  deleteDomain(where: DomainWhereUniqueInput!): Domain
  deleteDomains(where: [DomainWhereUniqueInput!]!): [Domain]
  createWhoisServer(data: WhoisServerCreateInput!): WhoisServer
  createWhoisServers(data: [WhoisServerCreateInput!]!): [WhoisServer]
  updateWhoisServer(
    where: WhoisServerWhereUniqueInput!
    data: WhoisServerUpdateInput!
  ): WhoisServer
  updateWhoisServers(data: [WhoisServerUpdateArgs!]!): [WhoisServer]
  deleteWhoisServer(where: WhoisServerWhereUniqueInput!): WhoisServer
  deleteWhoisServers(where: [WhoisServerWhereUniqueInput!]!): [WhoisServer]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
